datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  sessions      Session[]
  Authenticator Authenticator[]
  hobbies      Hobby[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2)
  date        DateTime
  description String
  reference   String?
  notes       String?

  userId     String
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  hobbyId    String?
  hobby      Hobby?              @relation(fields: [hobbyId], references: [id])
  categoryId String
  category   TransactionCategory @relation(fields: [categoryId], references: [id])
  taxYearId  String
  taxYear    TaxYear            @relation(fields: [taxYearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([hobbyId])
  @@index([categoryId])
  @@index([taxYearId])
}

model TransactionCategory {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        TransactionType
  transactions Transaction[]

  // UK specific tax category information
  allowable    Boolean @default(false) // Whether expenses in this category are tax-deductible
  hmrcCategory String? // Corresponding HMRC category for tax returns

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, type])
}

model TaxYear {
  id        String   @id @default(cuid())
  startYear Int      // e.g., 2023 for 2023/24 tax year
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([startDate, endDate])
}

model Hobby {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}